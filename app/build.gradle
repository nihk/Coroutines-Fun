apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "ca.cbc.testingfun2"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled true
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
        release {
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }

    flavorDimensions "default"

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            dimension "default"
            applicationIdSuffix = ".mock"
        }
        prod {
            dimension "default"
        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests {
        includeAndroidResources = true

        all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation "androidx.core:core-ktx:1.2.0-alpha02"

    def fragment_version = "1.1.0-beta01"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    testImplementation "androidx.fragment:fragment-testing:$fragment_version"

    testImplementation 'junit:junit:4.12'
    testImplementation "org.hamcrest:hamcrest-all:1.3"
    testImplementation "org.mockito:mockito-core:2.28.2"
    androidTestImplementation "org.mockito:mockito-core:2.28.2"
    testImplementation "org.mockito:mockito-android:2.28.2"
    androidTestImplementation "org.mockito:mockito-android:2.28.2"
    testImplementation "androidx.test:core-ktx:1.2.1-alpha01"
    androidTestImplementation "androidx.test:core-ktx:1.2.1-alpha01"
    testImplementation "androidx.test.ext:junit-ktx:1.1.2-alpha01"
    androidTestImplementation "androidx.test.ext:junit-ktx:1.1.2-alpha01"
    testImplementation "androidx.test:rules:1.3.0-alpha01"
    androidTestImplementation "androidx.test:rules:1.3.0-alpha01"
    androidTestImplementation 'androidx.test:runner:1.2.0'

    def espresso_version = "3.2.0"
    implementation "androidx.test.espresso:espresso-idling-resource:$espresso_version"
    testImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    testImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"
    testImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"

    def coroutines_version = "1.3.0-M1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    implementation "com.squareup.retrofit2:retrofit:2.6.0"
    implementation "com.squareup.moshi:moshi-kotlin:1.8.0"
    implementation "com.squareup.retrofit2:converter-moshi:2.6.0"

    implementation 'com.google.dagger:dagger:2.23.1'
    kapt 'com.google.dagger:dagger-compiler:2.23.1'
    implementation 'com.google.dagger:dagger-android:2.23.1'
    implementation 'com.google.dagger:dagger-android-support:2.23.1'
    kapt 'com.google.dagger:dagger-android-processor:2.23.1'

    def room_version = "2.1.0"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    // todo: what is in this package?
    testImplementation "androidx.room:room-testing:$room_version"

    def lifecycle_version = "2.2.0-alpha01"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    testImplementation "androidx.arch.core:core-testing:2.1.0-beta01"
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0-beta01"
}
